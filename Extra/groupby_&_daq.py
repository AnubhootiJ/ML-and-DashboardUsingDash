# -*- coding: utf-8 -*-
"""Groupby & Daq

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MwR9FtUWp3atcOxRPes_LHxIpvtesZHS
"""

import matplotlib.pyplot as plt
import pandas as pd

df = {  # data
    'Name':['A','B','C','A','B','B','C'],
    'Occur':[3,2,5,4,7,3,4],
    'Group':['X','X','Z','Z','Z','Y','Y']
}

df2 = pd.DataFrame.from_dict(df) # Have to comvert dictionary to DataFrame to use groupby

grp = df2.groupby('Name') # Grouped data based on Names. All A's will form one group and so on. 
grp.groups

df2.groupby('Name')['Occur'].sum() # Count will count the number of times Name occur and sum will add the value of the 'Occur' column

df2.groupby('Name')['Occur'].sum().plot(kind='barh') # gives the bar plot in horizontal manner with collective sum of Occurrences by Name against Name
# df2.groupby('Name')['Occur'].sum().plot(kind='scatter')  -> won't work, since it only works with a Dataframe and using groupby followed by sum gives us a series

grp = df2.groupby('Name')['Occur'].sum() #the type of this is a series
type(grp)

grp = df2.groupby('Name')

grp.get_group("B") # We can get a specific group using this function. we can also get the first group by using first() function

grp1 = df2.groupby('Group')
grp1['Occur'].sum()
type(grp1)

html.Div({
    html.Img(src='', id='Map1EQ')
    
    html.Img(src='', id='Map2EQ')
}, className = 'row')

import dash_daq as daq

daq.LEDDisplay( # LED Display daq
  id='my-daq-leddisplay',
  value="3.14159"
)

daq.Thermometer( # Thermometer daq
  id='my-daq-thermometer',
  max=105,
  value=98.6,
  min=95
)

############ ------ DARK THEME ----- #################
import dash   
from dash.dependencies import Input, Output
import dash_daq as daq
import dash_html_components as html


app = dash.Dash(__name__)

theme = {
    'dark': False,
    'detail': '#007439',
    'primary': '#00EA64', 
    'secondary': '#6E6E6E'
}

app.layout = html.Div(id='dark-theme-provider-demo', children=[
    html.Br(), 
    daq.ToggleSwitch(
        id='daq-light-dark-theme',
        label=['Light', 'Dark'],
        style={'width': '250px', 'margin': 'auto'}, 
        value=False
    ),
    html.Div(
        id='dark-theme-component-demo',
        children=[
            daq.DarkThemeProvider(theme=theme, children=
                                  daq.Knob(value=6))
        ],
        style={'display': 'block', 'margin-left': 'calc(50% - 110px)'}
    )
])


@app.callback(
    Output('dark-theme-component-demo', 'children'),
    [Input('daq-light-dark-theme', 'value')]
)
def turn_dark(dark_theme): 
    if(dark_theme):
        theme.update(
            dark=True
        )
    else:
        theme.update(
            dark=False
        )
    return daq.DarkThemeProvider(theme=theme, children=
                                 daq.Knob(value=6))


@app.callback(
    Output('dark-theme-provider-demo', 'style'),
    [Input('daq-light-dark-theme', 'value')]
)
def change_bg(dark_theme):
    if(dark_theme):
        return {'background-color': '#303030', 'color': 'white'}
    else:
        return {'background-color': 'white', 'color': 'black'}


if __name__ == '__main__':
    app.run_server(debug=True)