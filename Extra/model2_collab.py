# -*- coding: utf-8 -*-
"""Model2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OZyePXD-tyex6GfDtHGd8lA4qi9r0_y4
"""

import numpy as np
import pandas as pd
import datetime
import time

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error #import MAE method from sklearn.metrics

from google.colab import files
uploaded = files.upload()

df_EQ = pd.read_csv('EQ.csv', encoding='latin-1')

timestamp = []
for d, t in zip(df_EQ['Date'], df_EQ['Time']):
    try:
        ts = datetime.datetime.strptime(d+' '+t, '%m/%d/%Y %H:%M:%S')
        timestamp.append(int(time.mktime(ts.timetuple())))
    except ValueError:
        timestamp.append('ValueError')

timeStamp = pd.Series(timestamp)
df_EQ['Timestamp'] = timeStamp.values

df_EQ = df_EQ.drop(['Date', 'Time'], axis=1)
df_EQ = df_EQ[df_EQ.Timestamp != 'ValueError']

X = df_EQ[['Timestamp', 'Latitude', 'Longitude']]
y = df_EQ[['Magnitude', 'Depth']]

train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.3, random_state=0)
print(train_X.shape, test_X.shape, train_y.shape, test_y.shape)

# ################## LINEAR REGRESSION ################# #

linearRegressor = LinearRegression()
linearRegressor.fit(train_X, train_y)
y_predict = linearRegressor.predict(test_X)
y_predict

linearRegressor.score(test_X, test_y)

# ################## DECISION REGRESSION ################# #
tree = DecisionTreeRegressor(max_depth=5)
tree.fit(train_X, train_y)
y_tree = tree.predict(test_X)
y_tree

tree.score(test_X, test_y)

# ################## RANDOM FOREST REGRESSION ################# #

reg2 = RandomForestRegressor(random_state=0)
reg2.fit(train_X, train_y)
y_forest = reg2.predict(test_X)
y_forest

reg2.score(test_X, test_y)

from sklearn.model_selection import GridSearchCV

parameters = {'n_estimators':[10, 20, 50, 100, 200, 500]}

grid_obj = GridSearchCV(reg2, parameters)
grid_fit = grid_obj.fit(train_X, train_y)
best_fit = grid_fit.best_estimator_

grid_fit.best_estimator_

best_fit.predict(test_X)

grid_fit.score(test_X, test_y)